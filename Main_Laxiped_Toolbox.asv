% Author     :   F. Moissenet
%                Biomechanics Laboratory (B-LAB)
%                University of Geneva
% License    :   Creative Commons Attribution-NonCommercial 4.0 International License 
%                https://creativecommons.org/licenses/by-nc/4.0/legalcode
% Source code:   To be defined
% Reference  :   To be defined
% Date       :   October 2025
% -------------------------------------------------------------------------
% Description:   To be defined
% -------------------------------------------------------------------------
% This work is licensed under the Creative Commons Attribution - 
% NonCommercial 4.0 International License. To view a copy of this license, 
% visit http://creativecommons.org/licenses/by-nc/4.0/ or send a letter to 
% Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
% -------------------------------------------------------------------------

% -------------------------------------------------------------------------
% INIT WORKSPACE
% -------------------------------------------------------------------------
clearvars;
close all; 
clc;
warning off;

% -------------------------------------------------------------------------
% SET FOLDERS
% -------------------------------------------------------------------------
Folder.toolbox       = 'C:\Users\Florent\OneDrive - Université de Genève\_PROJETS\LAXIPED\WP1\Toolbox\LAXIPED_Toolbox\';
Folder.dependencies  = 'C:\Users\Florent\OneDrive - Université de Genève\_PROJETS\LAXIPED\WP1\Toolbox\LAXIPED_Toolbox\dependencies\';
Folder.data          = 'C:\Users\Florent\OneDrive - Université de Genève\_PROJETS\LAXIPED\WP1\Dataset\LAXIPED\Data\';
addpath(genpath(Folder.dependencies));

% -------------------------------------------------------------------------
% SET SPECIMEN
% -------------------------------------------------------------------------
Specimen.id   = 'LAX-EX-A1';
Specimen.side = 'Right';

% -------------------------------------------------------------------------
% LOAD DYNAMIC TRIAL
% -------------------------------------------------------------------------
cd([Folder.data,Specimen.id,'\']);
c3dFile = 'Measurement_46_20250916_100623.c3d';
btkFile = btkReadAcquisition(c3dFile);
tMarker = btkGetMarkers(btkFile);
nmarker = fieldnames(tMarker);
fmarker = btkGetPointFrequency(btkFile);
% Set bony segments
segments = {'TIBIA','FIBUL','META1','META2','META3','META4','META5', ...
            'CUMED','CUINT','CULAT','CUBOI','NAVIC','TALUS','CALCA'};
% Process marker trajectories
for imarker = 1:numel(nmarker)
    data = permute(tMarker.(nmarker{imarker})(:,:), [2,3,1]); % 3x1xT
    data = zerosToNaN_array3(data);
%     data = interp_array3(data,'pchip');
%     data = smooth_array3(data,fmarker,3);
    Marker.(nmarker{imarker}) = data;
end
clear tMarker;

% -------------------------------------------------------------------------
% CLUSTER RIGIDIFICATION
% -------------------------------------------------------------------------
MarkerR = struct();
for isegment = 1:numel(segments)
    seg         = segments{isegment};
    X_seg       = cat(4,Marker.([seg '_c1']),Marker.([seg '_c2']), ...
                        Marker.([seg '_c3']),Marker.([seg '_c4']));
    out         = enforce_cluster_rigidity(X_seg,struct('method','trimmed','trimFrac',0.75));
    recon.(seg) = out.Xrigid;
    Sref.(seg)  = out.Smean;
    markers     = rigidMarkersFromCluster(recon.(seg));
    for imarker = 1:4
        MarkerR.([segments{isegment},'_c',num2str(imarker)]) = markers{imarker};
    end
end
MarkerR.FME      = Marker.FME;
MarkerR.FLE      = Marker.FLE;
MarkerR.TAM      = Marker.TAM;
MarkerR.FAL      = Marker.FAL; 

% -------------------------------------------------------------------------
% SET TIBIA/FIBULA ANATOMICAL COORDINATE SYSTEMS (MEAN FRAMES 1->100)
% -------------------------------------------------------------------------
Z         = Vnorm_array3(mean(MarkerR.FAL(:,:,1:100),3,'omitnan')-mean(MarkerR.TAM(:,:,1:100),3,'omitnan'));
X         = Vnorm_array3(cross((mean(MarkerR.FME(:,:,1:100),3,'omitnan')+mean(MarkerR.FLE(:,:,1:100),3,'omitnan'))/2-mean(MarkerR.FAL(:,:,1:100),3,'omitnan'),(mean(MarkerR.FME(:,:,1:100),3,'omitnan')+mean(MarkerR.FLE(:,:,1:100),3,'omitnan'))/2-mean(MarkerR.TAM(:,:,1:100),3,'omitnan')));
Y         = cross(Z,X);
O         = (mean(MarkerR.FAL(:,:,1:100),3,'omitnan')+mean(MarkerR.TAM(:,:,1:100),3,'omitnan'))/2;
T_a.TIBIA = [X Y Z O; 0 0 0 1];

% -------------------------------------------------------------------------
% COMPUTE RIGID TRANSFORMATION BETWEEN TECHNICAL AND ANATOMICAL FRAMES (MEAN FRAMES 1->100)
% -------------------------------------------------------------------------
for isegment = 1:numel(segments)
    X = Vnorm_array3(mean(MarkerR.([segments{isegment},'_c3'])(:,:,1:100),3,'omitnan') - mean(MarkerR.([segments{isegment},'_c1'])(:,:,1:100),3,'omitnan'));
    Y = Vnorm_array3(mean(MarkerR.([segments{isegment},'_c2'])(:,:,1:100),3,'omitnan') - mean(MarkerR.([segments{isegment},'_c4'])(:,:,1:100),3,'omitnan'));
    Z = cross(X,Y); 
    X = cross(Z,Y);
    O = (mean(MarkerR.([segments{isegment},'_c1'])(:,:,1:100),3,'omitnan') + ...
         mean(MarkerR.([segments{isegment},'_c2'])(:,:,1:100),3,'omitnan') + ...
         mean(MarkerR.([segments{isegment},'_c3'])(:,:,1:100),3,'omitnan') + ...
         mean(MarkerR.([segments{isegment},'_c4'])(:,:,1:100),3,'omitnan'))/4; % Cluster centroid
    for iframe = 1:size(X,3)
        T_t.(segments{isegment})(:,:,iframe) = [X(:,:,iframe) Y(:,:,iframe) Z(:,:,iframe) O(:,:,iframe); 0 0 0 1];
    end
    % Set rigid transformation between technical and anatomical CS
    T_ta.(segments{isegment}) = Mprod_array3(Minv_array3(T_t.(segments{isegment})), ...
                                             [T_a.TIBIA(1:4,1:3) T_t.(segments{isegment})(1:4,4)]);
end

% -------------------------------------------------------------------------
% COMPUTE TECHNICAL COORDINATE SYSTEMS
% -------------------------------------------------------------------------
for isegment = 1:numel(segments)
    X = Vnorm_array3(MarkerR.([segments{isegment},'_c3']) - MarkerR.([segments{isegment},'_c1']));
    Y = Vnorm_array3(MarkerR.([segments{isegment},'_c2']) - MarkerR.([segments{isegment},'_c4']));
    Z = cross(X,Y); 
    X = cross(Z,Y);
    O = (MarkerR.([segments{isegment},'_c1']) + ...
         MarkerR.([segments{isegment},'_c2']) + ...
         MarkerR.([segments{isegment},'_c3']) + ...
         MarkerR.([segments{isegment},'_c4']))/4; % Cluster centroid
    for iframe = 1:size(X,3)
        T_t.(segments{isegment})(:,:,iframe) = [X(:,:,iframe) Y(:,:,iframe) Z(:,:,iframe) O(:,:,iframe); 0 0 0 1];
    end
end

% -------------------------------------------------------------------------
% COMPUTE ANATOMICAL COORDINATE SYSTEMS
% -------------------------------------------------------------------------
for isegment = 1:numel(segments)
    T_a.(segments{isegment}) = Mprod_array3(T_t.(segments{isegment}),repmat(T_ta.(segments{isegment}),[1,1,size(T_t.(segments{isegment}),3)]));
end

% ------------------------------------------------------------------------
% SEGMENT KINEMATICS
% -------------------------------------------------------------------------
for isegment = 1:numel(segments)
    T_rel = Mprod_array3(Tinv_array3(T_a.TIBIA),T_a.(segments{isegment}));
    Euler = R2mobileYXZ_array3(T_rel(1:3,1:3,:)); % As for carpal bones
    Euler = permute(smooth_array3(permute(Euler,[2,1,3]),fmarker,[],'movmean',100),[2,1,3]);
    Euler = permute(interp_array3(permute(Euler,[2,1,3]),'pchip'),[2,1,3]);
    figure; hold on; 
    plot(permute(rad2deg(Euler),[3,2,1]),'-');
    title(segments{isegment});
end
figure;
hold on; axis equal;
for iframe = 1:size(T_a.TIBIA,3)
    nmarker = fieldnames(MarkerR);
    for imarker = 1:size(nmarker,1)
        plot3(MarkerR.(nmarker{imarker})(1,:,iframe),MarkerR.(nmarker{imarker})(2,:,iframe),MarkerR.(nmarker{imarker})(3,:,iframe),'Marker','o','Markersize',5,'Color','black');
    end
    for isegment = 1:numel(segments)
    %     plot_frame(T_t.(segments{isegment})(:,:,iframe),20,'','--');
        plot_frame(T_a.(segments{isegment})(:,:,iframe),20,'','-');
    end
    cla;
    ho
    pause(0.01);
end

% ------------------------------------------------------------------------
% JOINT KINEMATICS
% -------------------------------------------------------------------------
% META1 / CUMED
T_rel = Mprod_array3(Tinv_array3(T_a.CUMED),T_a.META1);
Euler = R2mobileYXZ_array3(T_rel(1:3,1:3,:));
Euler = permute(smooth_array3(permute(Euler,[2,1,3]),fmarker,[],'movmean',200),[2,1,3]);
Euler = permute(interp_array3(permute(Euler,[2,1,3]),'pchip'),[2,1,3]);
d     = T_rel(1:3,4,:)-mean(T_rel(1:3,4,1:100),3);
d     = smooth_array3(d,fmarker,[],'movmean',200);
d     = interp_array3(d,'pchip');
figure; sgtitle('META1 / CUMED');
subplot(1,2,1); hold on;
plot(permute(rad2deg(Euler),[3,2,1]),'-');
title('Rotations (°)');
subplot(1,2,2); hold on;
plot(permute(d,[3,1,2]),'-');
title('Translations (mm)');

% -------------------------------------------------------------------------
% 3D ANIMATION
% -------------------------------------------------------------------------
Xcells = cell(numel(segments),1);
for i = 1:numel(segments)
    seg = segments{i};
    if isfield(recon,seg)
        % Clusters rigidifiés
        Xcells{i} = struct('name',seg,'X',double(recon.(seg)),'S',double(Sref.(seg)));
    else
        % Cas TIBIA / FIBUL si pas rigidifiés : reconstruire depuis MarkerR
        X_seg = cat(4, MarkerR.([seg '_c1']), MarkerR.([seg '_c2']), ...
                       MarkerR.([seg '_c3']), MarkerR.([seg '_c4']));
        S = mean_shape_gpa_from_Xseg(X_seg);
        Xcells{i} = struct('name',seg,'X',double(X_seg),'S',double(S));
    end
end
T = size(MarkerR.TIBIA_c1,3);
time = (0:T-1)/fmarker;   % échelle temporelle en secondes

f = figure('Name','Clusters','Color','w');
ax = axes('Parent',f);
hold(ax,'on'); grid(ax,'on'); box(ax,'on'); view(ax,2); axis equal;
ax.FontSize = 14;

animate_clusters_slider_array3(Xcells, time, ax, ...
    struct('showMarkers',true,'showFrames',true,'speedFactor',1000));


% -------------------------------------------------------------------------
% EXPORT MARKERR TO NEW C3D
% -------------------------------------------------------------------------
cd([Folder.data,Specimen.id,'\']);
nmarker = fieldnames(MarkerR);
for i = 1:numel(nmarker)
    name              = nmarker{i};
    traj              = permute(MarkerR.(name),[3 1 2]);
    traj              = reshape(traj,[],3);
    traj              = double(traj);
    traj(isnan(traj)) = 0; 
    btkAppendPoint(btkFile,'marker',[name,'_corr'],traj);
end
outFile = [regexprep(c3dFile,'.c3d',''),'_corr.c3d'];
btkWriteAcquisition(btkFile, outFile);




